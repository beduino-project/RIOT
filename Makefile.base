ifeq (, $(__RIOTBUILD_FLAG))
    $(error You cannot build a module on its own. Use "make" in your application's directory instead.)
endif

ifeq (1, $(RUST_BUILD))
# For an explanation read the comment in Makefile.include
.NOTPARALLEL:
endif

unexport DIRS
DIRS := $(sort $(abspath ${DIRS}))

MODULE ?= $(shell basename $(CURDIR))

.PHONY: all ${DIRS:%=ALL--%} ${DIRS:%=CLEAN--%}

.DEFAULT_GOAL: all

all: $(BINDIR)/$(MODULE).a ..nothing

..nothing:
	@:

clean:: ${DIRS:%=CLEAN--%}

${DIRS:%=ALL--%}:
	$(QQ)"$(MAKE)" -C ${@:ALL--%=%}

${DIRS:%=CLEAN--%}:
	$(QQ)"$(MAKE)" -C ${@:CLEAN--%=%} clean

ifeq ($(strip $(SRC)),)
    SRC := $(filter-out $(SRC_NOLTO), $(wildcard *.c))
endif
ifeq ($(strip $(SRCXX)),)
    SRCXX := $(wildcard *.cpp)
endif
ifeq ($(strip $(RUSTSRC)),)
    RUSTSRC := $(wildcard *.rs)
endif
ifeq ($(strip $(ASMSRC)),)
    ASMSRC := $(wildcard *.s)
endif
ifeq ($(strip $(ASSMSRC)),)
    ASSMSRC := $(wildcard *.S)
endif

OBJC_LTO    := $(SRC:%.c=$(BINDIR)/$(MODULE)/%.o)
OBJC_NOLTO  := $(SRC_NOLTO:%.c=$(BINDIR)/$(MODULE)/%.o)
OBJC        := $(OBJC_NOLTO) $(OBJC_LTO)
OBJCXX      := $(SRCXX:%.cpp=$(BINDIR)/$(MODULE)/%.o)
RUSTOBJ     := $(RUSTSRC:%.rs=$(BINDIR)/$(MODULE)/%.o)
ASMOBJ      := $(ASMSRC:%.s=$(BINDIR)/$(MODULE)/%.o)
ASSMOBJ     := $(ASSMSRC:%.S=$(BINDIR)/$(MODULE)/%.o)

OBJ := $(OBJC) $(OBJCXX) $(ASMOBJ) $(ASSMOBJ)
DEP := $(OBJC:.o=.d) $(OBJCXX:.o=.d) $(ASSMOBJ:.o=.d)

$(BINDIR)/$(MODULE)/:
	$(Q)mkdir -p $@

CXXFLAGS = $(filter-out $(CXXUWFLAGS), $(CFLAGS)) $(CXXEXFLAGS)

# compile and generate dependency info

$(OBJC_LTO): CFLAGS+=$(LTOFLAGS)

$(OBJC): $(BINDIR)/$(MODULE)/%.o: %.c $(RIOTBUILD_CONFIG_HEADER_C)
	$(Q)$(CCACHE) $(CC) \
		-DRIOT_FILE_RELATIVE=\"$(patsubst $(RIOTBASE)/%,%,$(abspath $<))\" \
		-DRIOT_FILE_NOPATH=\"$(notdir $<)\" \
		$(CFLAGS) $(INCLUDES) -MD -MP -c -o $@ $(abspath $<)

$(OBJCXX): $(BINDIR)/$(MODULE)/%.o: %.cpp $(RIOTBUILD_CONFIG_HEADER_C)
	$(Q)$(CCACHE) $(CXX) \
		-DRIOT_FILE_RELATIVE=\"$(patsubst $(RIOTBASE)/%,%,$(abspath $<))\" \
		-DRIOT_FILE_NOPATH=\"$(notdir $<)\" \
		$(CXXFLAGS) $(CXXINCLUDES) $(INCLUDES) -MD -MP -c -o $@ $(abspath $<)

ifneq ($(strip $(RUSTSRC)),)
ifneq ($(filter main.rs,$(RUSTSRC)),)
    CRATE_TYPE := bin
else ifneq ($(filter lib.rs,$(RUSTSRC)),)
    CRATE_TYPE := lib
else
    $(error Could not figure out the CRATE_TYPE)
endif

include $(RIOTRUST)/Makefile.rust

ifneq (,$(RUST_FFI_HEADER))
BINDGEN_CFLAGS = -include $(RIOTBUILD_CONFIG_HEADER_C) \
	$(INCLUDES)

ifneq ($(TOOLCHAIN),llvm)
include $(RIOTCPU)/Makefile.include.llvm
BINDGEN_CFLAGS += $(GCC_C_INCLUDES)
endif

RUSTSRC += $(BINDIR)/$(MODULE)/ffi.rs
$(BINDIR)/$(MODULE)/ffi.rs: $(RUST_FFI_HEADER) | $(BINDIR)/$(MODULE)/
	$(Q)bindgen $(BINDGEN_FLAGS) -o $@ $< -- $(BINDGEN_CFLAGS)
endif

ifeq (1,$(RUST_FFI))
RUST_FFI_LIB = $(BINDIR)/$(MODULE)/libffi.a
$(RUST_FFI_LIB): $(OBJ)
	$(Q)$(AR) $(ARFLAGS) $@ $<
endif
endif

ifeq ($(CRATE_TYPE),bin)
$(RUSTOBJ): $(RUSTSRC) | $(BINDIR)/$(MODULE)/ $(RUST_FFI_LIB) ${DIRS:%=ALL--%}
	$(Q)rustc $(RUSTC_FLAGS) --emit obj -o $@ main.rs
$(BINDIR)/$(MODULE).a: $(RUSTOBJ)
	$(Q)$(AR) $(ARFLAGS) $@ $<
else ifeq ($(CRATE_TYPE),lib)
LIBNAME = $(MODULE:rust/%=rust/lib%)
$(BINDIR)/$(LIBNAME).rlib: $(RUSTSRC) $(RUST_FFI_HEADER) | $(BINDIR)/$(MODULE)/ $(RUST_FFI_LIB) ${DIRS:%=ALL--%}
	$(Q)MODULE="$(MODULE)" rustc $(RUSTC_FLAGS) --emit link,dep-info \
		--out-dir $(shell dirname $@) lib.rs
$(BINDIR)/$(MODULE).a: $(BINDIR)/$(LIBNAME).rlib
	$(Q)ln -fs $< $@
else
$(BINDIR)/$(MODULE).a $(OBJ): | $(BINDIR)/$(MODULE)/
$(BINDIR)/$(MODULE).a: $(OBJ) | ${DIRS:%=ALL--%}
	$(Q)$(AR) $(ARFLAGS) $@ $?
endif

$(ASMOBJ): $(BINDIR)/$(MODULE)/%.o: %.s
	$(Q)$(AS) $(ASFLAGS) -o $@ $(abspath $<)

$(ASSMOBJ): $(BINDIR)/$(MODULE)/%.o: %.S
	$(Q)$(CC) $(CFLAGS) $(INCLUDES) -MD -MP -c -o $@ $(abspath $<)

# pull in dependency info for *existing* .o files
# deleted header files will be silently ignored
-include $(DEP)
